'use strict'

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development'
process.env.NODE_ENV = 'development'

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
    throw err
})

// Ensure environment variables are read.
require('../config/env')

const fs = require('fs')
const chalk = require('chalk')
const webpack = require('webpack')
const WebpackDevServer = require('webpack-dev-server')
const {
    choosePort,
    createCompiler,
    prepareProxy,
    prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils')
const paths = require('../config/paths')
const config = require('../config/webpack.browser.development')
const createDevServerConfig = require('../config/webpackDevServer.config')

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3001
const HOST = process.env.HOST || '127.0.0.1'

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
    .then(port => {
        if (port == null) {
            // We have not found a port.
            return
        }
        const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
        const appName = require(paths.appPackageJson).name
        const urls = prepareUrls(protocol, HOST, port)
        const useYarn = true
        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler({ webpack, config, appName, urls, useYarn })
        // Load proxy config
        const proxySetting = require(paths.appPackageJson).proxy
        const proxyConfig = prepareProxy(proxySetting, paths.appPublic)
        // Serve webpack assets generated by the compiler over a web sever.
        const serverConfig = createDevServerConfig(
            proxyConfig,
            urls.lanUrlForConfig
        )

        const devServer = new WebpackDevServer(compiler, serverConfig)
        // Launch WebpackDevServer.
        devServer.listen(port, HOST, err => {
            if (err) {
                return console.log(err)
            }
            console.log(chalk.cyan('Starting the development server...\n'))

            // The console.log override below is stop react-dev-utils\WebpackDevServerUtils giving incorrect build help.
            // Bit hacky but was the only relatively easy way to fix it short of forking the library or submitting a PR
            // and waiting for/hoping the react team approve.
            const originalConsoleLog = console.log
            console.log = (args) => {
                if (typeof args === 'string' && args.indexOf("To create a production build, use ") !== -1) {
                    let stringToReplace = `use ${chalk.cyan(`${useYarn ? 'yarn' : 'npm run'} build`)}`
                    args = args.replace(stringToReplace, `follow the instructions in\nthis article: ${chalk.cyan('https://docs.frontastic.cloud/docs/deployment')}`)
                    console.log = originalConsoleLog
                }
                args ? originalConsoleLog(args) : originalConsoleLog()
            }
        });

        ['SIGINT', 'SIGTERM'].forEach(function (sig) {
            process.on(sig, function () {
                devServer.close()
                process.exit()
            })
        })
    })
    .catch(err => {
        if (err && err.message) {
            console.log(err.message)
        }
        process.exit(1)
    })
