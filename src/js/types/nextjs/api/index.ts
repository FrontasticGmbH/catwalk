// This file is autogenerated â€“ run `ant apidocs` to update it

import {
    Configuration as NextJsApiLayoutElementConfiguration,
} from './layoutelement/'

import {
    Configuration as NextJsApiTasticConfiguration,
} from './tastic/'

/* This class only represents the information available, the TypeScript API should provide a mechanism to request each
of these fields and we only submit those which have been requested. */
export interface ActionContext {
     frontasticContext?: Context;
}

export interface Configuration {
     mobile: boolean;
     tablet: boolean;
     desktop: boolean;
}

export interface Context {
     environment?: string;
     project: Project;
     projectConfiguration: any;
     locale: string;
     featureFlags?: Map<string, boolean>;
}

/* Stripped down version of {@link Frontastic\Catwalk\FrontendBundle\Domain\Stream}. */
export interface DataSourceConfiguration {
     dataSourceId: string;
     type: string;
     name: string;
     configuration: any;
}

/* This class only represents the information available, the TypeScript API should provide a mechanism to request each
of these fields and we only submit those which have been requested. */
export interface DataSourceContext {
     frontasticContext?: Context;
     pageFolder?: PageFolder;
     page?: Page;
     usingTastics?: Tastic[] | null;
     request?: Request;
}

export interface DataSourceResult {
     dataSourcePayload?: any;
}

/* This class only represents the information available, the TypeScript API should provide a mechanism to request each
of these fields and we only submit those which have been requested. */
export interface DynamicPageContext {
     frontasticContext?: null | Context;
}

export interface DynamicPageRedirectResult {
     redirectLocation?: any;
     statusCode?: any;
     statusMessage?: string;
     additionalResponseHeaders?: Map<string, string>;
}

export interface DynamicPageSuccessResult {
     dynamicPageType?: string;
     dataSourcePayload?: any;
     pageMatchingPayload?: any;
}

export interface LayoutElement {
     layoutElementId: string;
     configuration: NextJsApiLayoutElementConfiguration;
     tastics: Tastic[];
}

export interface Page {
     pageId: string;
     sections: Section[];
     state: string;
}

export interface PageFolder {
     pageFolderId: string;
     isDynamic: boolean;
     pageFolderType: string;
     configuration: any;
     dataSourceConfigurations: DataSourceConfiguration[];
     name?: string;
     ancestorIdsMaterializedPath: string;
     depth?: number;
     sort: number;
}

/* Stripped down version of {@link Frontastic\Common\ReplicatorBundle\Domain\Project}. */
export interface Project {
     projectId: string;
     name: string;
     customer: string;
     publicUrl: string;
     configuration: any;
     locales: string[];
     defaultLocale: string;
}

/* {@see https://expressjs.com/en/api.html#req}

Request structure as used by Express.js version 4.x + Frontastic additions. */
export interface Request {
     body?: string;
     cookies?: Map<string, string>;
     hostname?: string;
     method?: string;
     path?: string;
     query?: any;
     sessionData?: null | any;
}

/* {@see https://expressjs.com/en/api.html#res}

Response structure as used by Express.js version 4.x + Frontastic additions. */
export interface Response {
     statusCode?: string;
     body?: string;
     sessionData?: null | any;
}

export interface Section {
     sectionId: string;
     layoutElements?: LayoutElement[];
}

export interface Tastic {
     tasticId: string;
     tasticType: string;
     configuration: NextJsApiTasticConfiguration;
}
